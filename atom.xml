<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JaxXu&#39;Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaxxu.github.io/"/>
  <updated>2018-01-03T10:38:45.946Z</updated>
  <id>http://jaxxu.github.io/</id>
  
  <author>
    <name>Jax Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 笔记（二） ActiveMQ 部署</title>
    <link href="http://jaxxu.github.io/2018/01/03/Linux%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89ActiveMQ%E9%83%A8%E7%BD%B2/"/>
    <id>http://jaxxu.github.io/2018/01/03/Linux笔记（二）ActiveMQ部署/</id>
    <published>2018-01-03T10:36:08.000Z</published>
    <updated>2018-01-03T10:38:45.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>适读人群</strong>：入门 Linux ，想要了解 ActiveMQ 安装过程</p>
</blockquote>
<a id="more"></a>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><blockquote>
<p>目前 ActiveMQ 版本为<code>5.15.2 Release</code>，最低 JDK 版本要求为<code>1.8</code>。以下流程默认已经安装了 JDK 且最版本 &gt;= <code>1.8</code></p>
</blockquote>
<ul>
<li><p>下载 ActiveMQ 安装包并解压到当前目录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.shuosc.org/apache//activemq/5.15.2/apache-activemq-5.15.2-bin.tar.gz</div><div class="line">tar -zxvf apache-activemq-5.15.2-bin.tar.gz</div></pre></td></tr></table></figure>
<p>  解压后目录说明：</p>
<ul>
<li>bin : 二进制文件目录</li>
<li>conf : 配置目录</li>
<li>data : 日志文件目录</li>
<li>webapps : 系统管理员 web 控制界面文件</li>
</ul>
</li>
<li><p>启动 ActiveMQ 服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apache-activemq-5.15.2/bin/activemq start</div></pre></td></tr></table></figure>
<p>  控制台显示以下内容则表示启动成功</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INFO: Loading &apos;/root/activemq/apache-activemq-5.15.2//bin/env&apos;</div><div class="line">INFO: Using java &apos;/root/app/jdk1.8.0_151/bin/java&apos;</div><div class="line">INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details</div><div class="line">INFO: pidfile created : &apos;/root/activemq/apache-activemq-5.15.2//data/activemq.pid&apos; (pid &apos;10664&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，ActiveMQ 启动完成，启动成功后会启用<code>8161</code>和<code>61616</code>端口</p>
<p><code>8161</code>为 Web 管理控制端口，可以通过<code>http://ip:8161</code>进入管理页面，默认账户<code>admin</code>密码<code>admin</code></p>
<p><code>61616</code>为 ActiveMQ 通讯端口</p>
<h2 id="常见配置介绍"><a href="#常见配置介绍" class="headerlink" title="常见配置介绍"></a>常见配置介绍</h2><ul>
<li><p>修改 Web 管理控制访问端口<br>  因为 ActiveMQ 使用了 jetty 进行管理，所以我们只需要在 conf/jetty.xml 中对其进行配置即可。对如下位置进行修改即可。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jettyPort"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.web.WebConsolePort"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></div><div class="line">         <span class="comment">&lt;!-- the default port number for the web console --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"0.0.0.0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"8161"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改 Web 管理控制访问账户密码<br>  Web 管理控制访问账户密码定义放置在 conf/jetty-realm.properties 中。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Defines users that can access the web (console, demo, etc.)</div><div class="line"># username: password [,rolename ...]</div><div class="line">admin: admin, admin</div><div class="line">user: user, user</div></pre></td></tr></table></figure>
<p>  此处格式为：<code>账户: 密码, 角色</code></p>
</li>
<li><p>修改 ActiveMQ 通讯端口<br>  通讯端口的定义放置在 conf/activemq.xml 中。对如下位置进行修改即可。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"openwire"</span> <span class="attr">uri</span>=<span class="string">"tcp://0.0.0.0:61616?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"amqp"</span> <span class="attr">uri</span>=<span class="string">"amqp://0.0.0.0:5672?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"stomp"</span> <span class="attr">uri</span>=<span class="string">"stomp://0.0.0.0:61613?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"mqtt"</span> <span class="attr">uri</span>=<span class="string">"mqtt://0.0.0.0:1883?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"ws"</span> <span class="attr">uri</span>=<span class="string">"ws://0.0.0.0:61614?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transportConnectors</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="http://activemq.apache.org" target="_blank" rel="external">ActiveMQ 官网</a></li>
<li><a href="http://activemq.apache.org/getting-started.html" target="_blank" rel="external">ActiveMQ 入门</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;适读人群&lt;/strong&gt;：入门 Linux ，想要了解 ActiveMQ 安装过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://jaxxu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jaxxu.github.io/tags/Linux/"/>
    
      <category term="ActiveMQ" scheme="http://jaxxu.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记（一）安装JDK</title>
    <link href="http://jaxxu.github.io/2017/05/11/Linux%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85JDK/"/>
    <id>http://jaxxu.github.io/2017/05/11/Linux笔记（一）安装JDK/</id>
    <published>2017-05-11T08:29:00.000Z</published>
    <updated>2018-01-03T08:50:38.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>适读人群</strong>：</p>
<p><strong>前言</strong>： 入手了一个新机子，记录一下折腾过程</p>
</blockquote>
<a id="more"></a>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>检查JDK安装情况<code>java -version</code></li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;适读人群&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;： 入手了一个新机子，记录一下折腾过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://jaxxu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jaxxu.github.io/tags/Linux/"/>
    
      <category term="JDK" scheme="http://jaxxu.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>部署 Let&#39;s Encrypt 免费 SSL 证书 ＋ Tomcat 支持</title>
    <link href="http://jaxxu.github.io/2017/05/11/%E9%83%A8%E7%BD%B2%20Let&#39;s%20Encrypt%20%E5%85%8D%E8%B4%B9%20SSL%20%E8%AF%81%E4%B9%A6%20%EF%BC%8B%20Tomcat%20%E6%94%AF%E6%8C%81/"/>
    <id>http://jaxxu.github.io/2017/05/11/部署 Let&#39;s Encrypt 免费 SSL 证书 ＋ Tomcat 支持/</id>
    <published>2017-05-11T08:29:00.000Z</published>
    <updated>2018-01-03T08:51:05.497Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong>： 最近公司要用到https，收费的嘿嘿，公司是不可能支持的，只能开始捣鼓免费的 Let’s Encrypt 证书~</p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h3><blockquote>
<p><strong>Wiki</strong>:： <a href="https://sliksvn.com/download/" target="_blank" rel="external">Let’s Encrypt</a> 是一个于2015年三季度推出的数字证书认证机构 ， 将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供<strong>免费</strong>的 <a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0" target="_blank" rel="external">SSL/TLS</a> 证书。</p>
</blockquote>
<p>划重点:免费,记住这个就行了 :) 当然还有自动化</p>
<blockquote>
<p><strong>Tips</strong>： 目前官方推荐的获取和安装方式是通过 <a href="https://certbot.eff.org/" target="_blank" rel="external">certbot</a> ， 所以下面文章也会围绕这个软件来开始</p>
</blockquote>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol>
<li>已经部署jdk环境变量</li>
<li>需要在域名指向的服务器上操作，不然会报找不到443端口的错误。</li>
<li>linux环境</li>
</ol>
<h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="获取-Let’s-Encrypt"><a href="#获取-Let’s-Encrypt" class="headerlink" title="获取 Let’s Encrypt"></a>获取 Let’s Encrypt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//获取certbot</div><div class="line">wget https://dl.eff.org/certbot-auto  </div><div class="line">//设置权限</div><div class="line">chmod a+x certbot-auto</div></pre></td></tr></table></figure>
<h3 id="执行自动部署"><a href="#执行自动部署" class="headerlink" title="执行自动部署"></a>执行自动部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./certbot-auto</div></pre></td></tr></table></figure>
<p>这里需要下载一大堆依赖,别被吓到了,有些时候需要输入Y同意<br>过程中可能遇到包冲突，只需要将包卸载后，重新运行<code>./certbot-auto</code></p>
<p>过程中有可能遇到下面的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Saving debug log to /var/log/letsencrypt/letsencrypt.log</div><div class="line">Failed to find executable apachectl in PATH: /usr/java/jdk1.7.0_79/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</div><div class="line">Certbot doesn&apos;t know how to automatically configure the web server on this system. However, it can still get a certificate for you. Please run &quot;certbot-auto certonly&quot; to do so. You&apos;ll need to manually configure your web server to use the resulting certificate.</div></pre></td></tr></table></figure></p>
<p>这个时候只需要按照提示,运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./certbot-auto certonly</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里需要注意下，卡在 ‘Installing Python packages’ 的，需要先把 pip 的下载源修改一下<br>将 <code>~/.pip.pip.conf</code> 修改为以下内容即可解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com</div></pre></td></tr></table></figure></p>
<p><strong>Tips</strong>：如果<code>~/.pip/pip.conf</code>文件不存在则创建，然后修改，然后重新运行即可</p>
</blockquote>
<p>依赖包下载完后会进入交互界面，依次是：填写邮箱、域名（多域名用空格或逗号隔开）、条款确认、验证域名所有权。</p>
<blockquote>
<p><strong>Tips</strong>：<code>./certbot-auto certonly</code>进来的还会有一个选择模式的,输入1就 ok 了</p>
</blockquote>
<p>执行成功后会提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Congratulations! Your certificate and chain have been saved at  </div><div class="line">   /etc/letsencrypt/live/xxx.com/fullchain.pem. Your cert will</div><div class="line">   expire on 2016-10-05. To obtain a new or tweaked version of this</div><div class="line">   certificate in the future, simply run certbot-auto again. To</div><div class="line">   non-interactively renew *all* of your certificates, run</div><div class="line">   &quot;certbot-auto renew&quot;</div></pre></td></tr></table></figure></p>
<p>此时的生成的证书文件都已经在如下路径了<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/letsencrypt</div></pre></td></tr></table></figure></p>
<p>主要用到的文件在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/letsencrypt/live/xxxxx.com</div></pre></td></tr></table></figure></p>
<h3 id="生成-jks证书"><a href="#生成-jks证书" class="headerlink" title="生成.jks证书"></a>生成.jks证书</h3><p>貌似比较新的tomcat已经支持了 pem 文件，我用的 tomcat7 :( 老老实实生成文件了</p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>先创建个临时文件夹,省得搞坏了 :)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /mnt/web/temp</div><div class="line">#将上步骤中生成的两个pem文件拷贝过来</div><div class="line">cp /etc/letsencrypt/live/yourDomain/fullchain.pem /mnt/web/temp</div><div class="line">cp /etc/letsencrypt/live/yourDomain/privkey.pem /mnt/web/temp</div><div class="line">#进入临时文件夹</div><div class="line">cd /mnt/web/temp</div></pre></td></tr></table></figure></p>
<h4 id="生成-p12文件"><a href="#生成-p12文件" class="headerlink" title="生成.p12文件"></a>生成.p12文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name tomcat</div></pre></td></tr></table></figure>
<p>这里会要求设置密码，及下面代码中的 <code>yourPKCS12pass</code></p>
<h4 id="生成-jks证书-1"><a href="#生成-jks证书-1" class="headerlink" title="生成.jks证书"></a>生成.jks证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -importkeystore -deststorepass yourJKSpass -destkeypass yourKeyPass -destkeystore MyDSKeyStore.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass yourPKCS12pass -alias tomcat</div></pre></td></tr></table></figure>
<p>其中<code>yourPKCS12pass</code> 是上一步中设置的ssl证书密码，这里的<code>yourKeyPass</code>是要设置的<strong>keystore</strong>密码，可以与<code>yourPKCS12pass</code>一致，下面配置 tomcat 会用到。<br><code>yourJKSpass</code>的话大家随意 :)</p>
<h4 id="配置-tomcat-以支持-https"><a href="#配置-tomcat-以支持-https" class="headerlink" title="配置 tomcat 以支持 https"></a>配置 tomcat 以支持 https</h4><p>先把生成的 <code>MyDSKeyStore.jks</code> 文件 放到 <code>tomcat</code> 的 <code>conf</code> 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /mnt/web/temp/MyDSKeyStore.jks /mnt/web/tomcat/tomcat8/conf</div></pre></td></tr></table></figure></p>
<p>编辑<code>tomcat</code>-&gt;<code>conf</code>-&gt;<code>server.xml</code>文件</p>
<p>找到如下内容并取消其注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot; </div><div class="line">URIEncoding=&quot;UTF-8&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; </div><div class="line">scheme=&quot;https&quot; secure=&quot;true&quot; clientAuth=&quot;false&quot; </div><div class="line">sslProtocol=&quot;TLS&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot; </div><div class="line">URIEncoding=&quot;UTF-8&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; </div><div class="line">scheme=&quot;https&quot; secure=&quot;true&quot; clientAuth=&quot;false&quot; </div><div class="line">sslProtocol=&quot;TLS&quot; </div><div class="line">keystoreFile=&quot;conf/MyDSKeyStore.jks&quot; </div><div class="line">keystorePass=&quot;yourJKSpass&quot; </div><div class="line">keyAlias=&quot;tomcat&quot; </div><div class="line">keyPass=&quot;yourKeyPass&quot;/&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Tips</strong>:记得修改上面的 <code>yourKeyPass</code> 、 <code>yourJKSpass</code> 为你生成时刚才设置的密码</p>
</blockquote>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>修改后，重启 tomcat ，现在已经可以通过<code>https://你的域名</code>访问了(手动撒花)</p>
<h3 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h3><p>Let’s Encrypt 申请的证书会有三个月的有效期，可以到期前手动续约，也可以写定时脚本任务自动续约。下面是简单的续期脚本</p>
<ol>
<li><p>脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#/bin/sh</div><div class="line"></div><div class="line">#续期   说明：只用renew的话，会先检查证书是否需要更新，大概是距离到期还有三天或者十几天之内才会执行更新，否则会提示不需要更新。（昨天更新了证书，今天直接用renew，提示不允许更新）</div><div class="line">#这里方便测试，增加参数--force-renew，能够强制立即更新（但好像也会有检查，时间会变短，比如我刚才更新过了，马上再次执行会报错并提示不需要更新）。</div><div class="line"> ./certbot-auto renew --force-renew</div><div class="line">#生成p12</div><div class="line">cd /mnt/web/temp &amp;&amp;  openssl pkcs12 -export -in fullchain.pem -inkey privkey.pem -out fullchain_and_key.p12 -name tomcat -passin passyourPKCS12pass  -passout pass:yourPKCS12pass  </div><div class="line">#移动新生成的证书文件</div><div class="line">cp /etc/letsencrypt/live/yourDomain/fullchain.pem /mnt/web/temp</div><div class="line">cp /etc/letsencrypt/live/yourDomain/privkey.pem /mnt/web/temp </div><div class="line">#生成jks文件</div><div class="line">#备份并删除原jks文件</div><div class="line">mv /mnt/web/tomcat/tomcat8/conf/MyDSKeyStore.jks /mnt/web/temp/MyDSKeyStore`date &apos;+%Y-%m-%d&apos;`.jks</div><div class="line">cd /mnt/web/temp &amp;&amp; keytool -importkeystore -deststorepass yourKeyPass  -destkeypass yourKeyPass  -destkeystore MyDSKeyStore.jks -srckeystore fullchain_and_key.p12 -srcstoretype PKCS12 -srcstorepass yourPKCS12pass  -alias tomcat</div><div class="line">#移动MyDSKeyStore.jks到tomcat config目录下</div><div class="line">mv /mnt/web/temp/MyDSKeyStore.jks /mnt/web/tomcat/tomcat8/conf</div><div class="line">#重启服务器</div><div class="line">/mnt/web/tomcat/tomcat8/bin/restartup.sh</div></pre></td></tr></table></figure>
</li>
<li><p>定时任务</p>
</li>
</ol>
<p>脚本有了，还需要在 linux 中添加一个定期执行脚本的任务，这里用 linux 自带的 cron 来处理这部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure></p>
<p>在打开的编辑器中添加如下内容（每个月1号凌晨3点更新）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 0 3 *  *  sh /mnt/web/temp/ssl_auto_auth.sh &gt;/dev/null 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>
<h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p> 码字不易，点个赞呗<br> 有钱人可以请我喝个咖啡~ :)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;： 最近公司要用到https，收费的嘿嘿，公司是不可能支持的，只能开始捣鼓免费的 Let’s Encrypt 证书~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTTPS" scheme="http://jaxxu.github.io/categories/HTTPS/"/>
    
    
      <category term="IDEA" scheme="http://jaxxu.github.io/tags/IDEA/"/>
    
      <category term="IDE" scheme="http://jaxxu.github.io/tags/IDE/"/>
    
      <category term="Tomcat" scheme="http://jaxxu.github.io/tags/Tomcat/"/>
    
      <category term="HTTPS" scheme="http://jaxxu.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>从Eclipse入坑IDEA(一)：IDEA导入SVN项目</title>
    <link href="http://jaxxu.github.io/2016/11/18/%E4%BB%8EEclipse%E5%85%A5%E5%9D%91IDEA(%E4%B8%80)%EF%BC%9AIDEA%E5%AF%BC%E5%85%A5SVN%E9%A1%B9%E7%9B%AE/"/>
    <id>http://jaxxu.github.io/2016/11/18/从Eclipse入坑IDEA(一)：IDEA导入SVN项目/</id>
    <published>2016-11-18T06:25:00.000Z</published>
    <updated>2018-01-03T08:51:05.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>适读人群</strong>： 想从Eclipse的开发者</p>
<p><strong>前言</strong>： 自从用上了IDEA之后就再也回不去Eclipse了，为了愉快的和公司的小伙伴们协作，网上IDEA资料又偏少，索性自己捣鼓了一下，跟大家分享一下</p>
</blockquote>
<a id="more"></a>
<h2 id="安装SVN插件"><a href="#安装SVN插件" class="headerlink" title="安装SVN插件"></a>安装SVN插件</h2><ol>
<li><p>下载插件<br>推荐使用<a href="https://sliksvn.com/download/" target="_blank" rel="external">sliksvn</a>插件，下载安装即用，及其方便。<a href="https://sliksvn.com/download/" target="_blank" rel="external">官网</a></p>
</li>
<li><p>配置SVN插件<br><code>File</code> → <code>Settings</code> 打开IDEA配置<br>找到<code>Version Control</code>，选择<code>Subversion</code><br>之后如下图在红框内填入SVN.exe地址</p>
<blockquote>
<p><strong>Tips</strong>:这里我把路径加入了环境变量，所以填的svn</p>
</blockquote>
</li>
</ol>
<p><img src="http://ogtt5pngo.bkt.clouddn.com/image/svn_setter.png" alt="svn路径配置"></p>
<h2 id="从SVN导出项目"><a href="#从SVN导出项目" class="headerlink" title="从SVN导出项目"></a>从SVN导出项目</h2><ol>
<li><p>选择<code>Check out from Version Control</code> -&gt; <code>Subversion</code><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_1.png" alt="从SVN导出项目1"></p>
</li>
<li><p>添加SVN仓库地址<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_2.png" alt="从SVN导出项目2"></p>
</li>
<li><p>选择刚才添加的仓库，选择<code>Checkout</code><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_3.png" alt="从SVN导出项目3"></p>
</li>
<li><p>选择一个路径存放导出的文件<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_4.png" alt="从SVN导出项目4"></p>
</li>
<li><p>选择具体路径与一些其他选项<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_5.png" alt="从SVN导出项目5"></p>
</li>
<li><p>选择JDK版本<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_6.png" alt="从SVN导出项目6"></p>
</li>
<li><p>然后开始漫长的等待<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_7.png" alt="从SVN导出项目7"></p>
</li>
<li><p>最后这里弹出已经引入项目,是否打开.选NO<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_8.png" alt="从SVN导出项目8"></p>
</li>
<li><p>点击Import Project<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_9.png" alt="从SVN导出项目9"></p>
</li>
<li><p>选择刚才导出的路径<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_10.png" alt="从SVN导出项目10"></p>
</li>
<li><p>然后一路next<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/daochu_11.png" alt="从SVN导出项目11"></p>
</li>
</ol>
<blockquote>
<p>到此,导入Eclipse项目结束.</p>
</blockquote>
<h2 id="配置与运行项目"><a href="#配置与运行项目" class="headerlink" title="配置与运行项目"></a>配置与运行项目</h2><ol>
<li><p>添加Tomcat服务器<br>选择<code>Run</code> -&gt; <code>EditConfigurations..</code>然后选择添加<code>TomcatServer</code> -&gt; <code>local</code><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/addtomcat_1.png" alt="添加Tomcat"><br>选择热部署<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/addtomcat_2.png" alt="添加Tomcat"></p>
</li>
<li><p>打开<code>Project Structure</code> 在右上角有快捷方式<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_1.png" alt="配置项目1"></p>
</li>
<li><p>可以看到如下图,这里的不用管<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_2.png" alt="配置项目1"></p>
</li>
<li><p>选择右边<code>Modules</code>添加<code>Tomcat</code><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_3.png" alt="配置项目1"><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_4.png" alt="配置项目1"></p>
</li>
<li><p>选择右边<code>Artifacts</code>，先选<code>Web Application exploded</code>添加上自己模块的导出war<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_5.png" alt="配置项目1"><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_6.png" alt="配置项目1"><br>然后再把生成的exploded 加入到Archive中.<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_7.png" alt="配置项目1"></p>
</li>
<li><p>再次进入通过选择<code>Run</code> -&gt; <code>EditConfigurations..</code>进入Tomcat配置,选择<code>Deployment</code>选项卡,选择添加<code>Artifact</code><br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_8.png" alt="配置项目1"><br>选择第二个,点ok<br><img src="http://ogtt5pngo.bkt.clouddn.com/image/peizhi_9.png" alt="配置项目1"></p>
</li>
</ol>
<blockquote>
<p>到此,已经全部完成整个流程,可以愉快的开始IDEA之旅了~</p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;适读人群&lt;/strong&gt;： 想从Eclipse的开发者&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;： 自从用上了IDEA之后就再也回不去Eclipse了，为了愉快的和公司的小伙伴们协作，网上IDEA资料又偏少，索性自己捣鼓了一下，跟大家分享一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://jaxxu.github.io/categories/IDE/"/>
    
      <category term="IDEA" scheme="http://jaxxu.github.io/categories/IDE/IDEA/"/>
    
    
      <category term="IDEA" scheme="http://jaxxu.github.io/tags/IDEA/"/>
    
      <category term="SVN" scheme="http://jaxxu.github.io/tags/SVN/"/>
    
      <category term="Eclipse" scheme="http://jaxxu.github.io/tags/Eclipse/"/>
    
  </entry>
  
</feed>
